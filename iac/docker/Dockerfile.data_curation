# Stage 1: Builder
FROM python:3.11-slim as builder

WORKDIR /app

# Install build dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    curl \
    git \
    && rm -rf /var/lib/apt/lists/*

# Install Rust for building dependencies
RUN curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
ENV PATH=/root/.cargo/bin:$PATH

# Install Poetry
ENV POETRY_VERSION=2.0.1
ENV POETRY_HOME=/opt/poetry
ENV POETRY_CACHE_DIR=/opt/.cache
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

RUN python -m venv /opt/poetry && \
    /opt/poetry/bin/pip install --upgrade pip && \
    /opt/poetry/bin/pip install "poetry==${POETRY_VERSION}" && \
    ln -s /opt/poetry/bin/poetry /usr/local/bin/poetry

# Set up project virtual environment
RUN python -m venv /app/.venv
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"
RUN pip install --upgrade pip

# Copy and install dependencies for data_curation
COPY ./pyproject.toml /app/pyproject.toml
COPY ./poetry.lock /app/poetry.lock

RUN poetry config virtualenvs.create false && \
    poetry install --no-interaction --no-ansi --with data_curation && \
    rm -rf /app/.venv/lib/python3.11/site-packages/tests

# Copy application code
COPY ./apps/data_curation ./apps/data_curation
COPY ./shared ./shared

# Stage 2: Final Image
FROM python:3.11-slim

WORKDIR /app

# Copy virtual environment from builder
COPY --from=builder /app/.venv /app/.venv
ENV VIRTUAL_ENV=/app/.venv
ENV PATH="/app/.venv/bin:$PATH"
ENV PYTHONPATH="/app:$PYTHONPATH"

# Copy application code
COPY ./apps/data_curation ./apps/data_curation
COPY ./shared ./shared

# Install runtime dependencies
RUN apt-get update \
    && apt-get install -y --no-install-recommends ffmpeg \
    && rm -rf /var/lib/apt/lists/*

EXPOSE 8001

CMD ["uvicorn", "apps.data_curation.main:app", "--host", "0.0.0.0", "--port", "8001"]